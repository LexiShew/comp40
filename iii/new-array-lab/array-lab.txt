           COMP 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
|Keeper of the record: Lexi Shewchuk (1331654)           |
|--------------------------------------------------------|
| Other group member(s): Maggie Cheng (1355578)          |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, i.e., an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (i.e., help us be sure you know which is which!):

    * Boxed: the data type stores pointers. These pointers contain the
            addresses of the objects you wish to store. For example, a
            boxes character array contains pointers to characters
            stored elsewhere in memory.

    * Unboxed: the data type directly stores the object. For example,
            an unboxed character array directly stores the characters.



1B: List two (or more) advantages of the boxed representation.
    
    * you can store pointers to different types of data in the same
        container (e.g. a pointer to an int can be stored alongside a
        pointer to a character)
    
    * you don't have to know the exact size of the objects you want
        to store in advance



1C: List two (or more) advantages of an unboxed representation.

    * it's more time efficient (you don't have to dereference to access
        the object, you just access directly)

    * it can be more space efficient if storing objects smaller than
        8 bytes (e.g. a char is only 1 byte)



1D: Look at the interface to UArray (a link to an interface
    summary is at the start of the lab instructions). Discuss the 
    methods that show the use of the unboxed style. Why, for example, 
    does UArray_new take both a number of elements and an element size? 

    * there's a length function and a size function. Length returns the
        number of objects stored in the array, while size is the number
        of bytes that the array takes up in memory

    * because the container needs to have enough space allocated for all
        of it's elements (i.e. not all elements are 8 bytes like they
        would be for a boxed container), the UArray_new function needs
        to take in the size of the objects it's storing
    
    * elements are accessed directly, rather than dereferenceing their 
        pointers
    


PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 5x7 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?
    
    * you would make a 1D array with 5 elements, and at each 
        index, you would point to another 1D array with 7 elements
        (so 8 1D arrays in total -- 1 parent array with 7 child
        arrays)
    
    * the cell [3,6] would be accessed by going to the 4th slot in
        the parent array and accessing the 7th element of the child
        array in that slot.



2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assuming
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 2D array where a value [x,y] would go in the
    1D array.

    * you would make an array of length 35

    * to access [x,y] you would find the index in the array by
        multiplying x * 7, then adding y (index = x * 7 + y)


2C. (optional) is there another mapping that would work as well?
    * there's probably a way to use mod



PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics
    of the UArray2 interface from reading useuarray2.c and from running
    correct_useuarray2.
    * we understand that print_and_check checks if a boolean (p2) is set to 
        a certain signal (MARKER (99)), then prints out the position passed
        index
    
    * column major just prints out all the indices in the first column,
        then second columns, etc.
    
    * row major prints out all the incides in the first row, then second
        row, etc.
    
    *  we learned what bitwise operations due (&= was confusing)

    * we gained a better understanding of casting void pointers and
        dereferncing their casts
    
    * we backwards constructed an interface from the client code, which was
        helpful to learn how to do








